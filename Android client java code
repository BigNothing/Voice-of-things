package com.example.root.jane;

import android.app.Activity;
import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.speech.RecognizerIntent;
import android.speech.tts.TextToSpeech;
import android.speech.tts.TextToSpeech.OnInitListener;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.TextView;
import android.widget.Toast;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Locale;
import java.util.Scanner;

public class MainActivity extends Activity implements TextToSpeech.OnInitListener {

    Context context;

    private final int REQ_CODE_SPEECH_INPUT = 100;
    private int port = 5500;
    private TextView txtSpeechInput;
    private ImageButton btnSpeak;
    private TextToSpeech tts;
    private Button toSpeechBtn;
   // boolean exitThread=true;
    String speakingWords = "Aloohaaa";
    String voiceText = "temp";
    String quitCase = "exit";



    public void onCreate(final Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);


        (new ArrayList<String>).add

        context = this;

        final EditText message = (EditText)findViewById(R.id.etMsg);
        Button sendToServBut = (Button)findViewById(R.id.bSend);
        Button setVoiceTextBut = (Button)findViewById(R.id.bSend2);
        final TextView convo = (TextView)findViewById(R.id.tvConvo);
        final TextView status = (TextView)findViewById(R.id.tvStatus);


        txtSpeechInput = ((TextView)findViewById(R.id.txtSpeechInput));
        btnSpeak = ((ImageButton)findViewById(R.id.btnSpeak));
        tts = new TextToSpeech(this, this);
        toSpeechBtn = ((Button)findViewById(R.id.toSpeech));

        speakingWords = convo.getText().toString();


        toSpeechBtn.setOnClickListener(new View.OnClickListener()
        {
            public void onClick(View v)
            {
                speakingWords = convo.getText().toString();
                speakOut();
            }
        });


        btnSpeak.setOnClickListener(new View.OnClickListener()
        {
            public void onClick(View v)
            {
                promptSpeechInput();
            }
        });


        setVoiceTextBut.setOnClickListener(new View.OnClickListener()
        {
            public void onClick(View v)
            {
                message.setText(MainActivity.this.voiceText);
            }
        });




        sendToServBut.setOnClickListener(new View.OnClickListener()
        {
            public void onClick(View v)
            {
                status.setText("Try to connect... to port 5500");


                Clients myClient = new Clients("10.0.204.124", port, convo, 0);
                Worker goWork = new Worker(convo);
                goWork.run();

            }

        });

        status.setText("Worker is working");

        Worker goWork = new Worker(convo);
        goWork.run();


    }

    public class Worker extends Thread{

        TextView convo;

        Worker(TextView convo){
            this.convo=convo;
        }

        public void run(){



            //while (!quitCase.equals(voiceText)) {

                Clients connect = new Clients("10.0.204.124", port, convo, 0);

                connect.execute();

//                exitThread=true;
//                while(exitThread){
//                    try{
//                        Thread.sleep(1000);
//                    }catch (InterruptedException e){
//                        e.printStackTrace();
//                    }
//                }


            //}


        }

    }


    //CONNECTION TO SERVER

    public class Clients extends AsyncTask<Void, Void, Void> {

        String dstAddress;
        int dstPort;
        int thrNum;
        String response = "";
        TextView convo = null;


        Clients(String addr, int port, TextView convo, int thrNum) {
            dstAddress = addr;
            dstPort = port;
            this.convo=convo;
            this.thrNum=thrNum;
        }

        public void waitResponse() {

            try {
                Thread.sleep(7000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        public void saySomething(final String text) {
            runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    Toast.makeText(context, text, Toast.LENGTH_LONG).show();
                    //speakOut();
                }
            });
        }


        @Override
        protected Void doInBackground(Void... arg0) {

            Socket connection = null;
            Scanner socketIn = null;
            PrintWriter socketOut = null;


            try {





                connection = new Socket(dstAddress, dstPort);
                socketIn = new Scanner(new BufferedReader(new InputStreamReader(connection.getInputStream())));
                socketOut = new PrintWriter(connection.getOutputStream(), true);

                //while(true) {

                    promptSpeechInput();

                    try {
                        Thread.sleep(7000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }

                    socketOut.println(voiceText);
                    socketOut.flush();

                    response += socketIn.nextLine() + "\n";
                    socketIn.nextLine();
                    response += socketIn.nextLine() + "\n";

                    speakingWords = response;

                    saySomething(response);

                    if(voiceText.equalsIgnoreCase("program")) {

                        promptSpeechInput();
                        waitResponse();

                        socketOut.println(voiceText);       //Send program name
                        socketOut.flush();

                        response += socketIn.nextLine() + "\n";
                        socketIn.nextLine();


                        saySomething(response);

                        while(!voiceText.equalsIgnoreCase("stop")) {

                            promptSpeechInput();
                            waitResponse();

                            socketOut.println(voiceText);       //Send program name
                            socketOut.flush();

                            response += socketIn.nextLine() + "\n";
                            socketIn.nextLine();


                            saySomething(response);
                        }

                    }

//                    runOnUiThread(new Runnable() {
//                        @Override
//                        public void run() {
//                            Toast.makeText(context, speakingWords, Toast.LENGTH_LONG).show();
//                            speakOut();
//                        }
//                    });


                    try {
                        Thread.sleep(7000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }

              //  }

            } catch (UnknownHostException e) {

                e.printStackTrace();
                response = "UnknownHostException: " + e.toString();
            } catch (IOException e) {

                e.printStackTrace();
                response = "IOException: " + e.toString();
            } finally {
                if (connection != null) {
                    try {
                        connection.close();
                    } catch (IOException e) {

                        e.printStackTrace();
                    }
                }
            }
            return null;
        }

        @Override
        protected void onPostExecute(Void result) {

            convo.setText(response);
            speakOut();
           // exitThread=false;

            super.onPostExecute(result);

        }

    }






    // SPEECH TO TEXT

    private void promptSpeechInput(){

        Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault());
        intent.putExtra(RecognizerIntent.EXTRA_PROMPT, getString(R.string.speech_prompt));

        try{
            startActivityForResult(intent,REQ_CODE_SPEECH_INPUT);
        }catch(ActivityNotFoundException a){
            Toast.makeText(getApplicationContext(),getString(R.string.speech_not_supported),
                    Toast.LENGTH_SHORT).show();
        }

    }


    protected void onActivityResult(int requestCode, int resultCode, Intent data ){

        super.onActivityResult(requestCode, resultCode, data);

        switch(requestCode){
            case REQ_CODE_SPEECH_INPUT:{
                if(resultCode==RESULT_OK && null != data){

                    ArrayList<String> result = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);
                    txtSpeechInput.setText(result.get(0));
                    voiceText = (result.get(0));
                }
                break;
            }

        }

    }


    //TEXT TO SPEECH

    private void speakOut()
    {
        this.tts.speak(speakingWords, 0, null);
    }

    @Override
    public void onInit(int status) {

        if (status == TextToSpeech.SUCCESS) {

            int result = tts.setLanguage(Locale.US);

            if (result == TextToSpeech.LANG_MISSING_DATA
                    || result == TextToSpeech.LANG_NOT_SUPPORTED) {
                Log.e("TTS", "This Language is not supported");
            } else {
                btnSpeak.setEnabled(true);
                speakOut();
            }

        } else {
            Log.e("TTS", "Initilization Failed!");
        }

    }


    public void onDestroy()
    {
        if (this.tts != null)
        {
            this.tts.stop();
            this.tts.shutdown();
        }
        super.onDestroy();
    }




}

